// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_stochvol_RCPPEXPORTS_H_GEN_
#define RCPP_stochvol_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace stochvol {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("stochvol", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("stochvol", "_stochvol_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in stochvol");
            }
        }
    }

    inline void update_sv(const Rcpp::NumericVector& data, Rcpp::NumericVector& curpara, Rcpp::NumericVector& h, double& h0, Rcpp::NumericVector& mixprob, Rcpp::IntegerVector& r, const bool centered_baseline, const double C0, const double cT, const double Bsigma, const double a0, const double b0, const double bmu, const double Bmu, const double B011inv, const double B022inv, const bool Gammaprior, const bool truncnormal, const double MHcontrol, const int MHsteps, const int parameterization, const bool dontupdatemu, const double priorlatent0) {
        typedef SEXP(*Ptr_update_sv)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_update_sv p_update_sv = NULL;
        if (p_update_sv == NULL) {
            validateSignature("void(*update_sv)(const Rcpp::NumericVector&,Rcpp::NumericVector&,Rcpp::NumericVector&,double&,Rcpp::NumericVector&,Rcpp::IntegerVector&,const bool,const double,const double,const double,const double,const double,const double,const double,const double,const double,const bool,const bool,const double,const int,const int,const bool,const double)");
            p_update_sv = (Ptr_update_sv)R_GetCCallable("stochvol", "_stochvol_update_sv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_update_sv(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(curpara)), Shield<SEXP>(Rcpp::wrap(h)), Shield<SEXP>(Rcpp::wrap(h0)), Shield<SEXP>(Rcpp::wrap(mixprob)), Shield<SEXP>(Rcpp::wrap(r)), Shield<SEXP>(Rcpp::wrap(centered_baseline)), Shield<SEXP>(Rcpp::wrap(C0)), Shield<SEXP>(Rcpp::wrap(cT)), Shield<SEXP>(Rcpp::wrap(Bsigma)), Shield<SEXP>(Rcpp::wrap(a0)), Shield<SEXP>(Rcpp::wrap(b0)), Shield<SEXP>(Rcpp::wrap(bmu)), Shield<SEXP>(Rcpp::wrap(Bmu)), Shield<SEXP>(Rcpp::wrap(B011inv)), Shield<SEXP>(Rcpp::wrap(B022inv)), Shield<SEXP>(Rcpp::wrap(Gammaprior)), Shield<SEXP>(Rcpp::wrap(truncnormal)), Shield<SEXP>(Rcpp::wrap(MHcontrol)), Shield<SEXP>(Rcpp::wrap(MHsteps)), Shield<SEXP>(Rcpp::wrap(parameterization)), Shield<SEXP>(Rcpp::wrap(dontupdatemu)), Shield<SEXP>(Rcpp::wrap(priorlatent0)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void update_svl(const Rcpp::NumericVector& y, const Rcpp::NumericVector& y_star, const Rcpp::NumericVector& d, double& phi, double& rho, double& sigma2, double& mu, Rcpp::NumericVector& h, Rcpp::NumericVector& ht, const Rcpp::NumericVector& prior_phi, const Rcpp::NumericVector& prior_rho, const Rcpp::NumericVector& prior_sigma2, const Rcpp::NumericVector& prior_mu, const double stdev, const bool gammaprior, const Rcpp::IntegerVector& strategy) {
        typedef SEXP(*Ptr_update_svl)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_update_svl p_update_svl = NULL;
        if (p_update_svl == NULL) {
            validateSignature("void(*update_svl)(const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,double&,double&,double&,double&,Rcpp::NumericVector&,Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const double,const bool,const Rcpp::IntegerVector&)");
            p_update_svl = (Ptr_update_svl)R_GetCCallable("stochvol", "_stochvol_update_svl");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_update_svl(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(y_star)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(phi)), Shield<SEXP>(Rcpp::wrap(rho)), Shield<SEXP>(Rcpp::wrap(sigma2)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(h)), Shield<SEXP>(Rcpp::wrap(ht)), Shield<SEXP>(Rcpp::wrap(prior_phi)), Shield<SEXP>(Rcpp::wrap(prior_rho)), Shield<SEXP>(Rcpp::wrap(prior_sigma2)), Shield<SEXP>(Rcpp::wrap(prior_mu)), Shield<SEXP>(Rcpp::wrap(stdev)), Shield<SEXP>(Rcpp::wrap(gammaprior)), Shield<SEXP>(Rcpp::wrap(strategy)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_stochvol_RCPPEXPORTS_H_GEN_
