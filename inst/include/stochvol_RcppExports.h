// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_stochvol_RCPPEXPORTS_H_GEN_
#define RCPP_stochvol_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace stochvol {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("stochvol", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("stochvol", "_stochvol_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in stochvol");
            }
        }
    }

    inline SEXP sampler(const SEXP y_in, const SEXP draws_in, const SEXP burnin_in, const SEXP X_in, const SEXP bmu_in, const SEXP Bmu_in, const SEXP a0_in, const SEXP b0_in, const SEXP Bsigma_in, const SEXP thin_in, const SEXP timethin_in, const SEXP startpara_in, const SEXP startvol_in, const SEXP keeptau_in, const SEXP quiet_in, const SEXP para_in, const SEXP MHsteps_in, const SEXP B011_in, const SEXP B022_in, const SEXP mhcontrol_in, const SEXP gammaprior_in, const SEXP truncnormal_in, const SEXP offset_in, const SEXP dontupdatemu_in, const SEXP priordf_in, const SEXP priorbeta_in, const SEXP priorlatent0_in) {
        typedef SEXP(*Ptr_sampler)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sampler p_sampler = NULL;
        if (p_sampler == NULL) {
            validateSignature("SEXP(*sampler)(const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP)");
            p_sampler = (Ptr_sampler)R_GetCCallable("stochvol", "_stochvol_sampler");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sampler(Shield<SEXP>(Rcpp::wrap(y_in)), Shield<SEXP>(Rcpp::wrap(draws_in)), Shield<SEXP>(Rcpp::wrap(burnin_in)), Shield<SEXP>(Rcpp::wrap(X_in)), Shield<SEXP>(Rcpp::wrap(bmu_in)), Shield<SEXP>(Rcpp::wrap(Bmu_in)), Shield<SEXP>(Rcpp::wrap(a0_in)), Shield<SEXP>(Rcpp::wrap(b0_in)), Shield<SEXP>(Rcpp::wrap(Bsigma_in)), Shield<SEXP>(Rcpp::wrap(thin_in)), Shield<SEXP>(Rcpp::wrap(timethin_in)), Shield<SEXP>(Rcpp::wrap(startpara_in)), Shield<SEXP>(Rcpp::wrap(startvol_in)), Shield<SEXP>(Rcpp::wrap(keeptau_in)), Shield<SEXP>(Rcpp::wrap(quiet_in)), Shield<SEXP>(Rcpp::wrap(para_in)), Shield<SEXP>(Rcpp::wrap(MHsteps_in)), Shield<SEXP>(Rcpp::wrap(B011_in)), Shield<SEXP>(Rcpp::wrap(B022_in)), Shield<SEXP>(Rcpp::wrap(mhcontrol_in)), Shield<SEXP>(Rcpp::wrap(gammaprior_in)), Shield<SEXP>(Rcpp::wrap(truncnormal_in)), Shield<SEXP>(Rcpp::wrap(offset_in)), Shield<SEXP>(Rcpp::wrap(dontupdatemu_in)), Shield<SEXP>(Rcpp::wrap(priordf_in)), Shield<SEXP>(Rcpp::wrap(priorbeta_in)), Shield<SEXP>(Rcpp::wrap(priorlatent0_in)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_stochvol_RCPPEXPORTS_H_GEN_
