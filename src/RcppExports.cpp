// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// aug_kalman_filter
Rcpp::List aug_kalman_filter(const double phi, const double rho, const double sigma2, const Rcpp::NumericVector a, const Rcpp::NumericVector b, const Rcpp::NumericVector m, const Rcpp::NumericVector v, const Rcpp::NumericVector d, const Rcpp::NumericVector y_star, const double mu_mu, const double sigma2_mu, const Rcpp::StringVector centering);
RcppExport SEXP _stochvol_aug_kalman_filter(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP aSEXP, SEXP bSEXP, SEXP mSEXP, SEXP vSEXP, SEXP dSEXP, SEXP y_starSEXP, SEXP mu_muSEXP, SEXP sigma2_muSEXP, SEXP centeringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2_mu(sigma2_muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type centering(centeringSEXP);
    rcpp_result_gen = Rcpp::wrap(aug_kalman_filter(phi, rho, sigma2, a, b, m, v, d, y_star, mu_mu, sigma2_mu, centering));
    return rcpp_result_gen;
END_RCPP
}
// draw_h_auxiliary
Rcpp::NumericVector draw_h_auxiliary(const Rcpp::NumericVector y_star, const Rcpp::NumericVector d, const Rcpp::NumericVector s, const double phi, const double rho, const double sigma2, const double mu, const Rcpp::CharacterVector centering, const Rcpp::DataFrame mixing_constants);
RcppExport SEXP _stochvol_draw_h_auxiliary(SEXP y_starSEXP, SEXP dSEXP, SEXP sSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP centeringSEXP, SEXP mixing_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type centering(centeringSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type mixing_constants(mixing_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_h_auxiliary(y_star, d, s, phi, rho, sigma2, mu, centering, mixing_constants));
    return rcpp_result_gen;
END_RCPP
}
// draw_latent_auxiliaryMH
Rcpp::NumericVector draw_latent_auxiliaryMH(const Rcpp::NumericVector y, const Rcpp::NumericVector y_star, const Rcpp::NumericVector d, const Rcpp::NumericVector h, const double phi, const double rho, const double sigma2, const double mu, const Rcpp::DataFrame mixing_constants);
RcppExport SEXP _stochvol_draw_latent_auxiliaryMH(SEXP ySEXP, SEXP y_starSEXP, SEXP dSEXP, SEXP hSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP mixing_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type mixing_constants(mixing_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_latent_auxiliaryMH(y, y_star, d, h, phi, rho, sigma2, mu, mixing_constants));
    return rcpp_result_gen;
END_RCPP
}
// draw_s_auxiliary
Rcpp::NumericVector draw_s_auxiliary(const Rcpp::NumericVector y_star, const Rcpp::NumericVector d, const Rcpp::NumericVector h, const double phi, const double rho, const double sigma2, const double mu, const Rcpp::CharacterVector centering, const Rcpp::DataFrame mixing_constants);
RcppExport SEXP _stochvol_draw_s_auxiliary(SEXP y_starSEXP, SEXP dSEXP, SEXP hSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP centeringSEXP, SEXP mixing_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type centering(centeringSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type mixing_constants(mixing_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_s_auxiliary(y_star, d, h, phi, rho, sigma2, mu, centering, mixing_constants));
    return rcpp_result_gen;
END_RCPP
}
// mixture_state_post_dist
Rcpp::NumericMatrix mixture_state_post_dist(const Rcpp::NumericVector eps_star, const Rcpp::NumericVector eta, const Rcpp::NumericVector d, const double mu, const double sigma2, const double rho, const Rcpp::CharacterVector centering, const Rcpp::DataFrame mixing_constants);
RcppExport SEXP _stochvol_mixture_state_post_dist(SEXP eps_starSEXP, SEXP etaSEXP, SEXP dSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP rhoSEXP, SEXP centeringSEXP, SEXP mixing_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type eps_star(eps_starSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type centering(centeringSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type mixing_constants(mixing_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(mixture_state_post_dist(eps_star, eta, d, mu, sigma2, rho, centering, mixing_constants));
    return rcpp_result_gen;
END_RCPP
}
// svlsample_cpp
Rcpp::List svlsample_cpp(const int draws, const Rcpp::NumericVector& y, const Rcpp::NumericVector& y_star, const Rcpp::NumericVector d, const int burnin, const int thinpara, const int thinlatent, const int thintime, const double phi_init, const double rho_init, const double sigma2_init, const double mu_init, const Rcpp::NumericVector& h_init, const double prior_phi_a, const double prior_phi_b, const double prior_rho_a, const double prior_rho_b, const double prior_sigma2_shape, const double prior_sigma2_rate, const double prior_mu_mu, const double prior_mu_sigma, const double stdev, const bool gammaprior, const Rcpp::CharacterVector& strategy, const Rcpp::DataFrame& mixing_constants);
RcppExport SEXP _stochvol_svlsample_cpp(SEXP drawsSEXP, SEXP ySEXP, SEXP y_starSEXP, SEXP dSEXP, SEXP burninSEXP, SEXP thinparaSEXP, SEXP thinlatentSEXP, SEXP thintimeSEXP, SEXP phi_initSEXP, SEXP rho_initSEXP, SEXP sigma2_initSEXP, SEXP mu_initSEXP, SEXP h_initSEXP, SEXP prior_phi_aSEXP, SEXP prior_phi_bSEXP, SEXP prior_rho_aSEXP, SEXP prior_rho_bSEXP, SEXP prior_sigma2_shapeSEXP, SEXP prior_sigma2_rateSEXP, SEXP prior_mu_muSEXP, SEXP prior_mu_sigmaSEXP, SEXP stdevSEXP, SEXP gammapriorSEXP, SEXP strategySEXP, SEXP mixing_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const int >::type thinpara(thinparaSEXP);
    Rcpp::traits::input_parameter< const int >::type thinlatent(thinlatentSEXP);
    Rcpp::traits::input_parameter< const int >::type thintime(thintimeSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_init(phi_initSEXP);
    Rcpp::traits::input_parameter< const double >::type rho_init(rho_initSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2_init(sigma2_initSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h_init(h_initSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_phi_a(prior_phi_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_phi_b(prior_phi_bSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_rho_a(prior_rho_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_rho_b(prior_rho_bSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_sigma2_shape(prior_sigma2_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_sigma2_rate(prior_sigma2_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_mu_mu(prior_mu_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_mu_sigma(prior_mu_sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< const bool >::type gammaprior(gammapriorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type strategy(strategySEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type mixing_constants(mixing_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(svlsample_cpp(draws, y, y_star, d, burnin, thinpara, thinlatent, thintime, phi_init, rho_init, sigma2_init, mu_init, h_init, prior_phi_a, prior_phi_b, prior_rho_a, prior_rho_b, prior_sigma2_shape, prior_sigma2_rate, prior_mu_mu, prior_mu_sigma, stdev, gammaprior, strategy, mixing_constants));
    return rcpp_result_gen;
END_RCPP
}
// simulation_smoother
Rcpp::List simulation_smoother(const double mu, const Rcpp::List filter_results, const Rcpp::CharacterVector centering);
RcppExport SEXP _stochvol_simulation_smoother(SEXP muSEXP, SEXP filter_resultsSEXP, SEXP centeringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type filter_results(filter_resultsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type centering(centeringSEXP);
    rcpp_result_gen = Rcpp::wrap(simulation_smoother(mu, filter_results, centering));
    return rcpp_result_gen;
END_RCPP
}
// draw_theta_rwMH
Rcpp::NumericVector draw_theta_rwMH(const double phi, const double rho, const double sigma2, const double mu, const Rcpp::NumericVector y, const Rcpp::NumericVector h, const Rcpp::NumericVector prior_phi, const Rcpp::NumericVector prior_rho, const Rcpp::NumericVector prior_sigma2, const Rcpp::NumericVector prior_mu, const Rcpp::CharacterVector centering, const double stdev);
RcppExport SEXP _stochvol_draw_theta_rwMH(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP ySEXP, SEXP hSEXP, SEXP prior_phiSEXP, SEXP prior_rhoSEXP, SEXP prior_sigma2SEXP, SEXP prior_muSEXP, SEXP centeringSEXP, SEXP stdevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_phi(prior_phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_rho(prior_rhoSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_sigma2(prior_sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_mu(prior_muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type centering(centeringSEXP);
    Rcpp::traits::input_parameter< const double >::type stdev(stdevSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_theta_rwMH(phi, rho, sigma2, mu, y, h, prior_phi, prior_rho, prior_sigma2, prior_mu, centering, stdev));
    return rcpp_result_gen;
END_RCPP
}
// theta_log_likelihood
double theta_log_likelihood(const double phi, const double rho, const double sigma2, const double mu, const Rcpp::NumericVector y, const Rcpp::NumericVector h, const Rcpp::CharacterVector centering);
RcppExport SEXP _stochvol_theta_log_likelihood(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP ySEXP, SEXP hSEXP, SEXP centeringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type centering(centeringSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_log_likelihood(phi, rho, sigma2, mu, y, h, centering));
    return rcpp_result_gen;
END_RCPP
}
// theta_log_prior
double theta_log_prior(const double phi, const double rho, const double sigma2, const double mu, const Rcpp::NumericVector prior_phi, const Rcpp::NumericVector prior_rho, const Rcpp::NumericVector prior_sigma2, const Rcpp::NumericVector prior_mu);
RcppExport SEXP _stochvol_theta_log_prior(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP prior_phiSEXP, SEXP prior_rhoSEXP, SEXP prior_sigma2SEXP, SEXP prior_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_phi(prior_phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_rho(prior_rhoSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_sigma2(prior_sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type prior_mu(prior_muSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_log_prior(phi, rho, sigma2, mu, prior_phi, prior_rho, prior_sigma2, prior_mu));
    return rcpp_result_gen;
END_RCPP
}
// theta_transform
Rcpp::NumericVector theta_transform(const double f, const double r, const double s, const double m);
RcppExport SEXP _stochvol_theta_transform(SEXP fSEXP, SEXP rSEXP, SEXP sSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type f(fSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_transform(f, r, s, m));
    return rcpp_result_gen;
END_RCPP
}
// theta_transform_inv
Rcpp::NumericVector theta_transform_inv(const double phi, const double rho, const double sigma2, const double mu);
RcppExport SEXP _stochvol_theta_transform_inv(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_transform_inv(phi, rho, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// theta_transform_log_det_jac
double theta_transform_log_det_jac(const double f, const double r, const double s, const double m);
RcppExport SEXP _stochvol_theta_transform_log_det_jac(SEXP fSEXP, SEXP rSEXP, SEXP sSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type f(fSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_transform_log_det_jac(f, r, s, m));
    return rcpp_result_gen;
END_RCPP
}
// theta_transform_inv_log_det_jac
double theta_transform_inv_log_det_jac(const double phi, const double rho, const double sigma2, const double mu);
RcppExport SEXP _stochvol_theta_transform_inv_log_det_jac(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_transform_inv_log_det_jac(phi, rho, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// theta_proposal_stdev
Rcpp::NumericVector theta_proposal_stdev(const double phi, const double rho, const double sigma2, const double mu, const Rcpp::NumericVector y, const Rcpp::NumericVector h, const double stdev);
RcppExport SEXP _stochvol_theta_proposal_stdev(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP ySEXP, SEXP hSEXP, SEXP stdevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type stdev(stdevSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_proposal_stdev(phi, rho, sigma2, mu, y, h, stdev));
    return rcpp_result_gen;
END_RCPP
}
// theta_propose
Rcpp::NumericVector theta_propose(const double phi, const double rho, const double sigma2, const double mu, const Rcpp::NumericVector y, const Rcpp::NumericVector h, const double stdev);
RcppExport SEXP _stochvol_theta_propose(SEXP phiSEXP, SEXP rhoSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP ySEXP, SEXP hSEXP, SEXP stdevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type stdev(stdevSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_propose(phi, rho, sigma2, mu, y, h, stdev));
    return rcpp_result_gen;
END_RCPP
}
